1. utilize "tailwindcss" for Designing
2. contextAPI and Reducers
3. JSON server for storing information about "products"
   JSON serverAuth for userInfo, dashboardInfo

4. Two deployments
    frontend ---> netlify or versel
    backend --> anyother platform

-----------------------------------------------------------------------------------

1. tailwind installation steps
-----------------------------
1. npm install -D tailwindcss@3
2. npx tailwindcss init   (intilaize the tailwind file(tailwind.config.js))
3. Add the Tailwind directives to your CSS(Add ur own extended classes in ur index.css file)
   
2. JSON server & JSON serverAuth (https://www.npmjs.com/package/json-server-auth)

  *JSON server-documentation(https://github.com/typicode/json-server)
  1. npm install -D json-server json-server-auth
   To start JSON Server ----> (json-server --watch db.json)
   watch on port:8000 :- (json-server --watch data/db.json --port 8000)

  2. JSON-Server-auth-documentation (https://github.com/jeremyben/json-server-auth)
      JSON Server Auth adds a simple "JWT based authentication flow"
      JWT-documentation (JSON Web Tokens-jwt.io)

      *Start JSON server (with JSON server Auth as middleware) :
        # Running both JSON-Sever & JSON-Sever-Auth in same command
        -->json-server db.json -m ./node_modules/json-server-auth
        # with json-server installed globally and json-server-auth installed locally

3. React-Router-DOM (https://www.npmjs.com/package/react-router-dom)
   1. npm i react-router-dom@6

4. google fonts   
  1. google fonts imports in index.css

5. bootstrap icons
  1. install the bootstrapicon (npm i bootstrap-icons) and import them at top of "index.js"
                   or
  2. Add the CDN link (@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css");) in index.css


6. working JSON server with authentication routes like:
      POST /register
      POST /login
      GET /660/resource (protected routes for authenticated users)

   1. install required packages locally -> npm install json-server json-server-auth
   2. we create one Server.js
   3. update the scripts in "package.json"

      "scripts": {
          "start:server": "node server.js"
      }
   4. npm run start:server

7. React-toastify
    npm install --save react-toastify
    import { ToastContainer} from 'react-toastify'; //import this line in index.js
    import this whenever we want..

Generally we store information(login, register's info) in "session storge" or "cookes"
 localstorage is risky
8. session storage
    we store our "accessToken" and "userId" in session storage for validation
     if user is login or not(if login go to "products" page or else go to login page)



  